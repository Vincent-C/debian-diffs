Source: primus
Section: misc
Priority: optional
Maintainer: Alexander Monakov <amonakov@gmail.com>
Uploaders: Dmitry Zhurikhin <zhurikhin@gmail.com>
Build-Depends: debhelper (>= 9), mesa-common-dev
Standards-Version: 3.9.3
Homepage: https://github.com/amonakov/primus
Vcs-Git: git://github.com/amonakov/primus.git
Vcs-Browser: https://github.com/amonakov/primus

Package: primus
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, bumblebee,
 primus-lib (= ${binary:Version}), dpkg-dev
Description: nVidia Optimus support through offloading via GLX forking
 Primus is a shared library that provides OpenGL and GLX APIs and implements
 low-overhead local-only client-side OpenGL offloading via GLX forking,
 similar to VirtualGL. It intercepts GLX calls and redirects GL rendering
 to a secondary X display, presumably driven by a faster GPU. On swapping
 buffers, rendered contents are read back using a PBO and copied onto
 the drawable it was supposed to be rendered on in the first place.
 Basically all that gibberish means that nVidia Optimus can work better than
 with the Bumblebee project.

Package: primus-lib
Architecture: i386 amd64
Depends: ${shlibs:Depends}, ${misc:Depends}
Multi-Arch: same
Description: Shared libraries for primus
 Primus is a shared library that provides OpenGL and GLX APIs and implements
 low-overhead local-only client-side OpenGL offloading via GLX forking,
 similar to VirtualGL. It intercepts GLX calls and redirects GL rendering
 to a secondary X display, presumably driven by a faster GPU. On swapping
 buffers, rendered contents are read back using a PBO and copied onto
 the drawable it was supposed to be rendered on in the first place.
 Basically all that gibberish means that nVidia Optimus can work better than
 with the Bumblebee project.Package: primus-lib

Package: primus-lib-dbg
Architecture: i386 amd64
Section: debug
Depends: ${shlibs:Depends}, ${misc:Depends}
Multi-Arch: same
Description: Shared libraries for primus - debugging symbols
 Primus is a shared library that provides OpenGL and GLX APIs and implements
 low-overhead local-only client-side OpenGL offloading via GLX forking,
 similar to VirtualGL. It intercepts GLX calls and redirects GL rendering
 to a secondary X display, presumably driven by a faster GPU. On swapping
 buffers, rendered contents are read back using a PBO and copied onto
 the drawable it was supposed to be rendered on in the first place.
 Basically all that gibberish means that nVidia Optimus can work better than
 with the Bumblebee project.
